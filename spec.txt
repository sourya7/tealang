1. Comments 
a. Single line comments begin with #
b. Multiple line comments begin and end with ##

1. Statments 
a. A newline is taken as the end of each statement
b. Variables are created using the 'var' keyword
c. Scopes exist top down with global and a local scope. 
d. Global variables are shadowed by local variables of the same name

2. Functions
a. Values are always passed by reference. A constant value must be specified as such
b. A function must be defined with the 'fun' keyword. It must end with the 'end' keyword.
|   fun hello
|       [print: "Hello World"]
|   end

c. Functions have their parameters in the format specified as below.
|   fun printX:X andY:Y
|       [print:X+' '+Y]
|   end

d. Functions get called in the same order that they are defined
|   fun helloX:X andY:Y
|       [printX:X andY:Y]
|   end

e. Functions can be grouped
|   fun addX:X andY:Y
|       return x+y
|   end
|
|   fun helloNewX:X andY:Y
|       [printX:[addX:X andY:Y] andY:Y] 
|   end

f. Functions are first class objects
|   var copiedX:Y: = addX:andY:
|
|   fun takesCB:(cbX:Y:) withX:X withY:Y
|       [cbX:X withY:Y]
|   end
|
|   [takesCB: (copiedX:Y:) withX: X withY: Y]

g. Anonymous functions
|   var anonFuncX:Y: = fun (X:Y:)
|      [printX:X andY:Y]
|   endfun

4. Basic Data types
a. Integers represents the rational numbers
b. Double represents the fraction and irrational numbers 
c. String repreents a sequence of characters
d. Function represents a function object
e. Boolean values represent true of false values

5. Complex data types
a. Lists can store unordered data of any type
|   var list = @[1,2,"something"]
|   list[0] == 1 # true
|   list[0] = 5
|   [list length]

b. Dictionary stores key value pairs. 
|   @{"key"=> val}

6. Classes 
a. Classes can be used to build complex data types
|   class Dog
|       fun bark
|           [print:"woof!"]
|       endfun
|   endclass

b. Classes can inherit from one or more datatype
|   class Animal
|       var sound
|       fun init: sound
|           self.sound = sound
|       endfun
|       fun makeSound
|           [print:self.sound]
|       endfun
|   endclass

# A overriding class must call the super constructor
|   class Dog isa Animal,Organism 
|       fun init
|           [super init:"Woof!"]
|       endfun
|       fun bark
|           [self makeSound]
|       endfun
|   endclass
|
|   var dog = [Dog init]
|   [dog bark]

7. Control flow
a. If
|   if something 
|       # do something
|   endif

|   if something
|       # do something
|   elif something
|       # do something
|   else
|       # do something
|   endif

b. While 
|   while something
|       # do something
|   endwhile

c. For
|   for x in iterable
|       # do something
|   endfor
|
|   for x in range(10)
|       #do something
|   endfor

d. Exception handling
|   try
|       # something
|   catch e
|       # do something
|   endtry

e. With
|   with open(x) as f
|       f.read()
|   endwith

8. Metaclasses [experimental]
a. Every thing is an object. Classes are objects as well with thier creation by a metaclass. Metaclasses are objects as well.
b. There is a common metaclass to all classes. This metaclass implements all the necessary functions like equals and so on. This metaclass can be extended on a subclass to modify these functions

9. Other Experimental
a. Add the ability to add own symbols
|   @sym "@{#{Object} => #{Object},...}" "[insert:%2 withKey:%1]" "[Dict init]"
|   # The format is @sym <The string to parse> <The action> <The object to call>

10. Keywords
if, elif, else, endif, while, endwhile, for, in, endfor,fun, endfun, var, class, endclass, isa, try, catch, endtry, with, endwith, as 
