
funcMap = {
  "init", "init()" 
}

Globals::Init(builder);

CFunction::Init(builder);
CModule::Init(builder);

var container = [Table init]

CModule::Init(SIRBuilder& builder){
}

var t = [Table init]
[t append:2]

class Module {
  static vector<Module*> modules;
  Module(Module* m){ modules.push_back(m); }
  virtual void InitModule() = 0;
  void Import();
}

var t = [List init]
[t count]

DeclCModule(List);

class List : public Module {
  Map<SObject, SObject> container;
  SObject Init(){
    auto list = MakeShared<List>();
  }
  List() : Module(this) { }
  static void InitModule(){
      auto funcMap = 
      {{"append:", Append},
       {"append:WithKey", Append},
       {"count", Count},
       {"getValAt:", GetValAt},
       {"reverse", Reverse},
       {"insertVal:At:", InsertValAt}};
      //"append:", std::bind(&Table::Append, _1, _2)
      SetInit("init", Init);
      SetMethodMap(funcMap);
  }
  SObject Append(const VecSObj& obj){
    container[count++] = ob;
    return nullptr;
  }
  SObject Count(const VecSObj& obj){
      //pack container.size() into count
      return nullptr;
  }
  SObject GetValAt(const VecSObj& obj){
      return nullptr;
  }
  SObject Reverse(const VecSObj& obj){
      return nullptr;
  }
  SObject InsertValAt(const VecSObj& obj){
      return nullptr;
  }
}
