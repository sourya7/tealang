
funcMap = {
  "init", "init()" 
}

Globals::Init(builder);

CFunction::Init(builder);
CModule::Init(builder);

var container = [Table init]

CModule::Init(SIRBuilder& builder){
}

var t = [Table init]
[t append:2]

class Table : public Module {
  Map<SObject, SObject> container;
  Call(string methodName){
    if(methodName == "init"){
      
    }
  }
  Table(){
  }
  void Init(){
    auto table = MakeShared<Table>();
  }
  void Append(const SObject& ob){
    //if countType is not Integer, assert(false)
    container[count++] = ob;
  }
  void Append(const SObject& key, const SObject& val){
    //assert that countType and key-type is the same
    container[key] = val;
  }
}
